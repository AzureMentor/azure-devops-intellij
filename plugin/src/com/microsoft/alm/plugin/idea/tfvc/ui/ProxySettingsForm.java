// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the project root.

/*
 * Copyright 2000-2008 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.microsoft.alm.plugin.idea.tfvc.ui;

import com.intellij.ui.DocumentAdapter;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.intellij.util.EventDispatcher;
import com.microsoft.alm.common.utils.UrlHelper;
import org.apache.commons.lang.StringUtils;
import org.jetbrains.annotations.Nullable;

import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.EventListener;
import java.util.ResourceBundle;

public class ProxySettingsForm {

    private JPanel myContentPane;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        myContentPane = new JPanel();
        myContentPane.setLayout(new GridLayoutManager(6, 2, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        myContentPane.add(spacer1, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        addressText = new JTextField();
        myContentPane.add(addressText, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        addressLabel = new JLabel();
        this.$$$loadLabelText$$$(addressLabel, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("ProxySettingsDialog.Address"));
        myContentPane.add(addressLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 2, false));
        useProxyRadio = new JRadioButton();
        this.$$$loadButtonText$$$(useProxyRadio, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("ProxySettingsDialog.UseProxy"));
        myContentPane.add(useProxyRadio, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        noProxyRadio = new JRadioButton();
        this.$$$loadButtonText$$$(noProxyRadio, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("ProxySettingsDialog.NoProxy"));
        myContentPane.add(noProxyRadio, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        messageLabel = new JLabel();
        messageLabel.setForeground(new Color(-65536));
        messageLabel.setText(" ");
        myContentPane.add(messageLabel, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(300, -1), null, null, 0, false));
        infoLabel = new JLabel();
        infoLabel.setText("");
        myContentPane.add(infoLabel, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 2, false));
        addressLabel.setLabelFor(addressText);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(noProxyRadio);
        buttonGroup.add(useProxyRadio);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return myContentPane;
    }

    public interface Listener extends EventListener {
        void stateChanged();
    }

    private JRadioButton noProxyRadio;
    private JRadioButton useProxyRadio;
    private JTextField addressText;
    private JLabel messageLabel;
    private JLabel infoLabel;
    private JLabel addressLabel;

    private final EventDispatcher<Listener> myEventDispatcher = EventDispatcher.create(Listener.class);

    public ProxySettingsForm(final String initialProxyUri) {
        if (StringUtils.isEmpty(initialProxyUri)) {
            noProxyRadio.setSelected(true);
        } else {
            useProxyRadio.setSelected(true);
            addressText.setText(initialProxyUri.toString());
        }

        final ActionListener radioButtonListener = new ActionListener() {
            public void actionPerformed(final ActionEvent e) {
                updateContols();
                myEventDispatcher.getMulticaster().stateChanged();
            }
        };

        noProxyRadio.addActionListener(radioButtonListener);
        useProxyRadio.addActionListener(radioButtonListener);
        addressText.getDocument().addDocumentListener(new DocumentAdapter() {
            protected void textChanged(final DocumentEvent e) {
                myEventDispatcher.getMulticaster().stateChanged();
            }
        });

        infoLabel.setText(StringUtils.EMPTY);

        updateContols();
    }

    private void updateContols() {
        addressText.setEnabled(useProxyRadio.isSelected());
        infoLabel.setEnabled(useProxyRadio.isSelected());
        addressLabel.setEnabled(useProxyRadio.isSelected());

        if (useProxyRadio.isSelected()) {
            addressText.requestFocus();
        }
    }

    public JComponent getContentPane() {
        return myContentPane;
    }

    public void addListener(final Listener listener) {
        myEventDispatcher.addListener(listener);
    }

    public void removeListener(final Listener listener) {
        myEventDispatcher.removeListener(listener);
    }

    public boolean isValid() {
        return noProxyRadio.isSelected() || UrlHelper.isValidUrl(addressText.getText());
    }

    @Nullable
    public String getProxyUri() {
        if (noProxyRadio.isSelected()) {
            return null;
        } else {
            return addressText.getText().trim();
        }
    }

    public void setMessage(@Nullable final String message) {
        messageLabel.setText(message);
    }

}
