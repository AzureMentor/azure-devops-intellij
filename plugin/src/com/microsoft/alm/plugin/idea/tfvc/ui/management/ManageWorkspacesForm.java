// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the project root.

/*
 * Copyright 2000-2008 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.microsoft.alm.plugin.idea.tfvc.ui.management;

import com.intellij.ui.components.JBScrollPane;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.intellij.util.EventDispatcher;
import com.microsoft.alm.common.utils.UrlHelper;
import com.microsoft.alm.plugin.external.models.Server;
import com.microsoft.alm.plugin.external.models.Workspace;
import com.microsoft.alm.plugin.idea.common.resources.Icons;
import com.microsoft.alm.plugin.idea.common.resources.TfPluginBundle;
import com.microsoft.alm.plugin.idea.common.ui.common.ActionListenerContainer;
import com.microsoft.alm.plugin.idea.common.ui.common.treetable.CellRenderer;
import com.microsoft.alm.plugin.idea.common.ui.common.treetable.ContentProvider;
import com.microsoft.alm.plugin.idea.common.ui.common.treetable.CustomTreeTable;
import com.microsoft.alm.plugin.idea.common.ui.common.treetable.TreeTableColumn;
import org.apache.commons.lang.StringUtils;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.AbstractButton;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import java.awt.Insets;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.EventListener;
import java.util.List;
import java.util.ResourceBundle;

public class ManageWorkspacesForm {
    private final Logger logger = LoggerFactory.getLogger(ManageWorkspacesForm.class);

    public static final String CMD_RELOAD_WORKSPACES = "reloadWorkspaces";
    public static final String CMD_EDIT_WORKSPACE = "editWorkspace";
    public static final String CMD_DELETE_WORKSPACE = "deleteWorkspace";
    public static final String CMD_EDIT_PROXY = "editProxy";

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JBScrollPane jBScrollPane1 = new JBScrollPane();
        contentPane.add(jBScrollPane1, new GridConstraints(0, 0, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        jBScrollPane1.setViewportView(treeTable);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Tfvc.ManageWorkspaces.Accounts.Panel.Title")));
        reloadWorkspacesButton = new JButton();
        this.$$$loadButtonText$$$(reloadWorkspacesButton, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Tfvc.ManageWorkspaces.Reload.Button"));
        panel1.add(reloadWorkspacesButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        proxySettingsButton = new JButton();
        this.$$$loadButtonText$$$(proxySettingsButton, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Tfvc.ManageWorkspaces.Proxy.Button"));
        panel1.add(proxySettingsButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        workspacesPanel = new JPanel();
        workspacesPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(workspacesPanel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        workspacesPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Tfvc.ManageWorkspaces.Workspaces.Panel.Title")));
        editWorkspaceButton = new JButton();
        this.$$$loadButtonText$$$(editWorkspaceButton, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Tfvc.ManageWorkspaces.Edit.Button"));
        workspacesPanel.add(editWorkspaceButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteWorkspaceButton = new JButton();
        this.$$$loadButtonText$$$(deleteWorkspaceButton, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Tfvc.ManageWorkspaces.Delete.Button"));
        workspacesPanel.add(deleteWorkspaceButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    public interface Listener extends EventListener {
        void selectionChanged();
    }

    private static final TreeTableColumn<Object> COLUMN_SERVER_WORKSPACE = new TreeTableColumn<Object>(TfPluginBundle.message(TfPluginBundle.KEY_TFVC_MANAGE_WORKSPACES_MIXED_COLUMN), 200) {
        public String getPresentableString(final Object value) {
            if (value instanceof Server) {
                return ((Server) value).getName();
            } else if (value instanceof Workspace) {
                return ((Workspace) value).getName();
            }
            return StringUtils.EMPTY;
        }
    };

    private static final TreeTableColumn<Object> COLUMN_SERVER = new TreeTableColumn<Object>(TfPluginBundle.message(TfPluginBundle.KEY_TFVC_MANAGE_WORKSPACES_SERVER_COLUMN), 200) {
        public String getPresentableString(final Object value) {
            if (value instanceof Server) {
                return ((Server) value).getName();
            }
            return StringUtils.EMPTY;
        }
    };

    private static final TreeTableColumn<Object> COLUMN_COMMENT = new TreeTableColumn<Object>(TfPluginBundle.message(TfPluginBundle.KEY_TFVC_MANAGE_WORKSPACES_COMMENT_COLUMN), 100) {
        public String getPresentableString(final Object value) {
            if (value instanceof Workspace) {
                return ((Workspace) value).getComment();
            }
            return StringUtils.EMPTY;
        }
    };

    private JPanel contentPane;
    private JButton proxySettingsButton;
    private JButton editWorkspaceButton;
    private JButton deleteWorkspaceButton;
    private CustomTreeTable<Object> treeTable;
    private JPanel workspacesPanel;
    private JButton reloadWorkspacesButton;
    private boolean isShowWorkspaces = true;
    private final EventDispatcher<Listener> eventDispatcher = EventDispatcher.create(Listener.class);
    private final ContentProvider<Object> contentProvider;
    private final ActionListenerContainer listenerContainer = new ActionListenerContainer();

    private final ListSelectionListener selectionListener = new ListSelectionListener() {
        public void valueChanged(final ListSelectionEvent e) {
            updateButtons();
            eventDispatcher.getMulticaster().selectionChanged();
        }
    };

    public ManageWorkspacesForm(final ContentProvider<Object> contentProvider) {
        this.contentProvider = contentProvider;
        $$$setupUI$$$();
        updateButtons();

        reloadWorkspacesButton.setActionCommand(CMD_RELOAD_WORKSPACES);
        editWorkspaceButton.setActionCommand(CMD_EDIT_WORKSPACE);
        deleteWorkspaceButton.setActionCommand(CMD_DELETE_WORKSPACE);
        proxySettingsButton.setActionCommand(CMD_EDIT_PROXY);
    }

    public void addActionListener(final ActionListener listener) {
        proxySettingsButton.addActionListener(listener);
        editWorkspaceButton.addActionListener(listener);
        deleteWorkspaceButton.addActionListener(listener);
        reloadWorkspacesButton.addActionListener(listener);
        listenerContainer.add(listener);
    }

    private void createUIComponents() {
        treeTable = new CustomTreeTable<Object>(new CellRendererImpl(), false, true);
        treeTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        treeTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent mouseEvent) {
                super.mouseClicked(mouseEvent);
                //double click
                if (mouseEvent.getClickCount() == 2) {
                    listenerContainer.triggerEvent(this, CMD_EDIT_WORKSPACE);
                }
            }
        });
    }

    public void setShowWorkspaces(final boolean showWorkspaces) {
        isShowWorkspaces = showWorkspaces;
        workspacesPanel.setVisible(isShowWorkspaces);
        reloadWorkspacesButton.setVisible(isShowWorkspaces);
        final List<TreeTableColumn<Object>> columns =
                isShowWorkspaces ? Arrays.asList(COLUMN_SERVER_WORKSPACE, COLUMN_COMMENT) : Collections.singletonList(COLUMN_SERVER);

        treeTable.initialize(columns, contentProvider);
        treeTable.getSelectionModel().addListSelectionListener(selectionListener);
        treeTable.expandAll();
    }

    public void updateControls(final Object selectedServerOrWorkspace) {
        logger.info("Updating Manage Workspaces controls");
        treeTable.updateContent();
        treeTable.getSelectionModel().addListSelectionListener(selectionListener);
        treeTable.expandAll();

        Object newSelection = null;
        for (int i = 0; i < treeTable.getModel().getRowCount(); i++) {
            final Object o = ((DefaultMutableTreeNode) treeTable.getModel().getValueAt(i, 0)).getUserObject();
            if (selectedServerOrWorkspace instanceof Server && o instanceof Server) {
                final Server server1 = (Server) selectedServerOrWorkspace;
                final Server server2 = (Server) o;
                if (StringUtils.equals(server1.getName(), server2.getName())) {
                    newSelection = o;
                    break;
                }
            }
            if (selectedServerOrWorkspace instanceof Workspace && o instanceof Workspace) {
                final Workspace workspace1 = (Workspace) selectedServerOrWorkspace;
                final Workspace workspace2 = (Workspace) o;
                if (workspace1.equals(workspace2)) {
                    newSelection = o;
                    break;
                }
            }
        }
        treeTable.select(newSelection);
    }

    private void updateButtons() {
        final Server selectedServer = getSelectedServer();
        final Workspace selectedWorkspace = getSelectedWorkspace();

        proxySettingsButton.setEnabled(selectedServer != null);
        editWorkspaceButton.setEnabled(selectedWorkspace != null);
        deleteWorkspaceButton.setEnabled(selectedWorkspace != null);
        reloadWorkspacesButton.setEnabled(selectedServer != null);
    }

    @Nullable
    private Object getSelectedObject() {
        if (treeTable.getSelectedRowCount() == 1) {
            final Collection<Object> selection = treeTable.getSelectedItems();
            if (selection.size() == 1) {
                return treeTable.getSelectedItems().iterator().next();
            }
        }
        return null;
    }

    @Nullable
    public Workspace getSelectedWorkspace() {
        final Object selectedObject = getSelectedObject();
        if (selectedObject instanceof Workspace) {
            return (Workspace) selectedObject;
        }
        return null;
    }

    @Nullable
    public Server getSelectedServer() {
        final Object selectedObject = getSelectedObject();
        if (selectedObject instanceof Server) {
            return (Server) selectedObject;
        }
        return null;
    }

    public JComponent getContentPane() {
        return contentPane;
    }

    private static class CellRendererImpl extends CellRenderer<Object> {
        protected void render(final CustomTreeTable<Object> treeTable,
                              final TreeTableColumn<Object> column,
                              final Object value,
                              final JLabel cell) {
            super.render(treeTable, column, value, cell);

            if (column == COLUMN_SERVER_WORKSPACE || column == COLUMN_SERVER) {
                if (value instanceof Server) {
                    if (UrlHelper.isTeamServicesUrl(((Server) value).getName())) {
                        cell.setIcon(Icons.CLOUD);
                    } else {
                        cell.setIcon(Icons.SERVER);
                    }
                } else if (value instanceof Workspace) {
                    cell.setIcon(Icons.TFVC_LOGO);
                }
            }
        }
    }

    public JComponent getPreferredFocusedComponent() {
        return treeTable;
    }
}