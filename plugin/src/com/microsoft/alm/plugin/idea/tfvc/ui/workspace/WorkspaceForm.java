// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the project root.

/*
 * Copyright 2000-2009 JetBrains s.r.o.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.microsoft.alm.plugin.idea.tfvc.ui.workspace;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.ComboBox;
import com.intellij.ui.components.JBScrollPane;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.microsoft.alm.plugin.context.ServerContext;
import com.microsoft.alm.plugin.external.models.Workspace;
import com.microsoft.alm.plugin.idea.common.resources.TfPluginBundle;
import com.microsoft.alm.plugin.idea.common.ui.common.ValidationListener;

import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Insets;
import java.util.List;
import java.util.ResourceBundle;

public class WorkspaceForm {

    private JTextField name;
    private JLabel server;
    private JLabel owner;
    private JLabel computer;
    private JTextArea comment;
    private JPanel contentPane;
    private JPanel workingFolderPanel;
    private WorkspaceMappingsTableEditor tableEditor;
    private JLabel workingFoldersLabel;
    private ComboBox location;
    private final Project project;
    private final ServerContext serverContext;
    private final ValidationListener validationListener;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(9, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WorkspaceDialog.Name"));
        contentPane.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        name = new JTextField();
        contentPane.add(name, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        this.$$$loadLabelText$$$(label2, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WorkspaceDialog.Server"));
        contentPane.add(label2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        server = new JLabel();
        server.setText("https://");
        contentPane.add(server, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        this.$$$loadLabelText$$$(label3, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WorkspaceDialog.Owner"));
        contentPane.add(label3, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        owner = new JLabel();
        owner.setText("domain\\user");
        contentPane.add(owner, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        this.$$$loadLabelText$$$(label4, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WorkspaceDialog.Computer"));
        contentPane.add(label4, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        computer = new JLabel();
        computer.setText("localhost");
        contentPane.add(computer, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        this.$$$loadLabelText$$$(label5, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WorkspaceDialog.Comment"));
        contentPane.add(label5, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JBScrollPane jBScrollPane1 = new JBScrollPane();
        contentPane.add(jBScrollPane1, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comment = new JTextArea();
        comment.setLineWrap(true);
        comment.setRows(3);
        comment.setText("");
        jBScrollPane1.setViewportView(comment);
        workingFoldersLabel = new JLabel();
        this.$$$loadLabelText$$$(workingFoldersLabel, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WorkspaceDialog.WorkingFolders"));
        contentPane.add(workingFoldersLabel, new GridConstraints(7, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 10), null, 0, false));
        final JLabel label6 = new JLabel();
        this.$$$loadLabelText$$$(label6, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WorkspaceDialog.Location"));
        contentPane.add(label6, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        location = new ComboBox();
        location.setEditable(false);
        contentPane.add(location, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        contentPane.add(workingFolderPanel, new GridConstraints(8, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        label1.setLabelFor(name);
        label5.setLabelFor(comment);
        label6.setLabelFor(name);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }


    private enum Location {
        LOCAL,
        SERVER
    }

    private void createUIComponents() {
        final String defaultPath = project != null ? project.getBasePath() : "";
        tableEditor = new WorkspaceMappingsTableEditor(project, serverContext, defaultPath, new WorkspaceMappingsTableEditor.ValidationDispatcher() {
            @Override
            public void showValidationError(String errorMessage) {
                if (validationListener != null) {
                    validationListener.doValidate();
                }
            }
        });
        tableEditor.hideMessageLabel();
        tableEditor.setColumnReorderingAllowed(false);

        workingFolderPanel = new JPanel(new BorderLayout());
        workingFolderPanel.add(tableEditor.getContentPane());
    }

    public WorkspaceForm(final Project project, final ServerContext serverContext, final ValidationListener validationListener) {
        this.project = project;
        this.serverContext = serverContext;
        this.validationListener = validationListener;

        $$$setupUI$$$();
        workingFoldersLabel.setLabelFor(tableEditor.getPreferredFocusedComponent());
    }

    public JPanel getContentPane() {
        return contentPane;
    }

    public void setComputer(final String computer) {
        this.computer.setText(computer);
    }

    public void setOwner(final String owner) {
        this.owner.setText(owner);
    }

    public void setServer(final String server) {
        this.server.setText(server);
    }

    public void setWorkspaceName(final String name) {
        this.name.setText(name);
    }

    public String getWorkspaceName() {
        return name.getText();
    }

    public void setComment(final String comment) {
        this.comment.setText(comment);
    }

    public String getComment() {
        return comment.getText();
    }

    public void setMappings(final List<Workspace.Mapping> mappings) {
        tableEditor.setMappings(mappings);
    }

    public List<Workspace.Mapping> getMappings() {
        return tableEditor.getMappings();
    }

    public String getFirstMappingValidationError() {
        return tableEditor.getFirstValidationError();
    }

    public void setLocation(final Workspace.Location locationOption) {
        this.location.removeAllItems(); // clear previous item since we only have one item in there with it disabled
        this.location.addItem(locationOption);
    }

    public void setLoading(final boolean loading) {
        if (loading) {
            // TODO Localize or come up with a nicer way to show loading (see JLayer in 1.7)
            final String loadingMessage = TfPluginBundle.message(TfPluginBundle.KEY_WORKSPACE_DIALOG_LOADING);
            name.setEnabled(false);
            name.setText(loadingMessage);
            comment.setEnabled(false);
            comment.setText(loadingMessage);
            owner.setEnabled(false);
            owner.setText(loadingMessage);
            server.setEnabled(false);
            server.setText(loadingMessage);
            computer.setEnabled(false);
            computer.setText(loadingMessage);
            location.setEnabled(false); // always disabled
            location.addItem(loadingMessage);
        } else {
            name.setEnabled(true);
            comment.setEnabled(true);
            owner.setEnabled(true);
            server.setEnabled(true);
            computer.setEnabled(true);
        }
    }

    public JComponent getPreferredFocusedComponent() {
        return name;
    }

    public JComponent getComponent(final String name) {
        if (WorkspaceModel.PROP_NAME.equals(name)) {
            return this.name;
        } else if (WorkspaceModel.PROP_COMMENT.equals(name)) {
            return this.comment;
        } else if (WorkspaceModel.PROP_COMPUTER.equals(name)) {
            return this.computer;
        } else if (WorkspaceModel.PROP_MAPPINGS.equals(name)) {
            return this.workingFolderPanel;
        } else if (WorkspaceModel.PROP_OWNER.equals(name)) {
            return this.comment;
        } else if (WorkspaceModel.PROP_SERVER.equals(name)) {
            return this.server;
        }

        return null;
    }

}
