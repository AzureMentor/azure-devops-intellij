// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the project root.

/*
 * Copyright 2000-2008 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.microsoft.alm.plugin.idea.tfvc.ui;

import com.intellij.openapi.vcs.versionBrowser.ChangeBrowserSettings;
import com.intellij.openapi.vcs.versionBrowser.StandardVersionFilterComponent;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.microsoft.alm.plugin.idea.common.resources.TfPluginBundle;
import org.jetbrains.annotations.Nullable;

import javax.swing.AbstractButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JTextField;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;

public class TFSVersionFilterComponent extends StandardVersionFilterComponent<ChangeBrowserSettings> {
    private JPanel panel;
    private JCheckBox useAuthorFilter;
    private JTextField authorField;
    private JPanel standardPanel;

    public TFSVersionFilterComponent(final boolean showDateFilter) {
        super(showDateFilter);
        standardPanel.setLayout(new BorderLayout());
        standardPanel.add(getStandardPanel(), BorderLayout.CENTER);
        init(new ChangeBrowserSettings());
    }

    protected void updateAllEnabled(final ActionEvent e) {
        super.updateAllEnabled(e);
        updatePair(useAuthorFilter, authorField, e);
    }

    protected void initValues(final ChangeBrowserSettings settings) {
        super.initValues(settings);
        useAuthorFilter.setSelected(settings.USE_USER_FILTER);
        authorField.setText(settings.USER);
    }

    public void saveValues(final ChangeBrowserSettings settings) {
        super.saveValues(settings);
        settings.USER = authorField.getText();
        settings.USE_USER_FILTER = useAuthorFilter.isSelected();
    }

    protected void installCheckBoxListener(final ActionListener filterListener) {
        super.installCheckBoxListener(filterListener);
        useAuthorFilter.addActionListener(filterListener);
        authorField.addActionListener(filterListener);
    }

    public JPanel getPanel() {
        return panel;
    }

    @Nullable
    public String getAuthorFilter() {
        if (useAuthorFilter.isSelected() && authorField.getText().length() > 0) {
            return authorField.getText();
        } else {
            return null;
        }
    }

    @Override
    protected String getChangeNumberTitle() {
        return TfPluginBundle.message(TfPluginBundle.KEY_TFVC_REPOSITORY_VIEW_COLUMN_REVISION);
    }

    public JComponent getComponent() {
        return getPanel();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        useAuthorFilter = new JCheckBox();
        this.$$$loadButtonText$$$(useAuthorFilter, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Tfvc.RepositoryView.Filter.Author"));
        panel.add(useAuthorFilter, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        authorField = new JTextField();
        panel.add(authorField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        standardPanel = new JPanel();
        standardPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(standardPanel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
