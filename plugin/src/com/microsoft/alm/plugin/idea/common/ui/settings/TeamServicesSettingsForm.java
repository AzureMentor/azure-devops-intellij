// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the project root.

package com.microsoft.alm.plugin.idea.common.ui.settings;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.intellij.util.ui.JBUI;
import com.microsoft.alm.plugin.authentication.AuthTypes;
import com.microsoft.alm.plugin.idea.common.ui.common.ServerContextTableModel;
import com.microsoft.alm.plugin.idea.common.ui.common.SwingHelper;
import com.microsoft.alm.plugin.idea.common.ui.common.TableFocusListener;
import com.microsoft.alm.plugin.idea.common.ui.common.TableModelSelectionConverter;

import javax.swing.AbstractButton;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.RowSorter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;

/**
 * The general settings page UI
 */
public class TeamServicesSettingsForm {
    public static final String CMD_DELETE_PASSWORD = "deletePassword";
    public static final String CMD_UPDATE_PASSWORD = "updatePasword";
    public static final String CMD_AUTH_CHANGED = "authChanged";

    private JPanel mainPanel;
    private JButton updatePasswordButton;
    private JPanel passwordPanel;
    private JTable contextTable;
    private JScrollPane contextScrollPane;
    private JButton deletePasswordButton;
    private JRadioButton credsOption;
    private JRadioButton deviceFlowOption;
    private JPanel authTypePanel;

    public TeamServicesSettingsForm() {
        // Fix HiDPI scaling for table
        SwingHelper.scaleTableRowHeight(contextTable);
        // Fix tabbing in table
        SwingHelper.fixTabKeys(contextTable);
        contextTable.addFocusListener(new TableFocusListener(contextTable));
        contextScrollPane.setMinimumSize(new Dimension(JBUI.scale(200), JBUI.scale(50)));

        updatePasswordButton.setActionCommand(CMD_UPDATE_PASSWORD);
        deletePasswordButton.setActionCommand(CMD_DELETE_PASSWORD);
        credsOption.setActionCommand(CMD_AUTH_CHANGED);
        deviceFlowOption.setActionCommand(CMD_AUTH_CHANGED);
    }

    public JComponent getContentPane() {
        return mainPanel;
    }

    public void setContextTable(final ServerContextTableModel tableModel, final ListSelectionModel selectionModel) {
        contextTable.setModel(tableModel);
        contextTable.setSelectionModel(selectionModel);

        // Setup table sorter
        final RowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tableModel);
        contextTable.setRowSorter(sorter);

        // Attach an index converter to fix the indexes if the user sorts the list
        tableModel.setSelectionConverter(new TableModelSelectionConverter() {
            @Override
            public int convertRowIndexToModel(int viewRowIndex) {
                if (viewRowIndex >= 0) {
                    return contextTable.convertRowIndexToModel(viewRowIndex);
                }
                return viewRowIndex;
            }
        });
    }

    public void setAuthType(final AuthTypes authType) {
        if (AuthTypes.DEVICE_FLOW == authType) {
            credsOption.setSelected(false);
            deviceFlowOption.setSelected(true);
        } else {
            credsOption.setSelected(true);
            deviceFlowOption.setSelected(false);
        }
    }

    public AuthTypes getSelectAuthType() {
        if (deviceFlowOption.isSelected()) {
            return AuthTypes.DEVICE_FLOW;
        }
        return AuthTypes.CREDS;
    }

    public void addActionListener(final ActionListener listener) {
        // Hook up listener to all actions
        deletePasswordButton.addActionListener(listener);
        updatePasswordButton.addActionListener(listener);
        deviceFlowOption.addActionListener(listener);
        credsOption.addActionListener(listener);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        passwordPanel = new JPanel();
        passwordPanel.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        mainPanel.add(passwordPanel, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        passwordPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Settings.Config.Mgt.Title")));
        contextScrollPane = new JScrollPane();
        passwordPanel.add(contextScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        contextTable = new JTable();
        contextTable.setPreferredScrollableViewportSize(new Dimension(450, 150));
        contextScrollPane.setViewportView(contextTable);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        passwordPanel.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        deletePasswordButton = new JButton();
        this.$$$loadButtonText$$$(deletePasswordButton, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Settings.Config.Mgt.DeleteButton"));
        panel1.add(deletePasswordButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        updatePasswordButton = new JButton();
        this.$$$loadButtonText$$$(updatePasswordButton, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Settings.Config.Mgt.UpdateButton"));
        panel1.add(updatePasswordButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        authTypePanel = new JPanel();
        authTypePanel.setLayout(new GridLayoutManager(1, 3, new Insets(5, 5, 5, 5), -1, -1));
        mainPanel.add(authTypePanel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        authTypePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Settings.Auth.Method.Title")));
        credsOption = new JRadioButton();
        credsOption.setEnabled(true);
        credsOption.setSelected(true);
        this.$$$loadButtonText$$$(credsOption, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Settings.Auth.Method.Creds.Button"));
        credsOption.setToolTipText(ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Settings.Auth.Method.Creds.ToolTip"));
        authTypePanel.add(credsOption, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 2, false));
        deviceFlowOption = new JRadioButton();
        this.$$$loadButtonText$$$(deviceFlowOption, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Settings.Auth.Method.DeviceFlow.Button"));
        deviceFlowOption.setToolTipText(ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Settings.Auth.Method.DeviceFlow.ToolTip"));
        authTypePanel.add(deviceFlowOption, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 2, false));
        final Spacer spacer2 = new Spacer();
        authTypePanel.add(spacer2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        mainPanel.add(spacer3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(deviceFlowOption);
        buttonGroup.add(credsOption);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
